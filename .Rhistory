install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2 +100
my_sprt <- sprt(z - 1)
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z/mysqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0, 10)
c(1,2,3,4) +(0,10,100)
c(1,2,3,4) +c(0,10,100)
z*2 +1000
my_div
getwd()
ls(getwd())
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create()?
3
dir.create?
3
?dir.create
testdir <- dir.create()
dir.create(testdir)
dir.create("testdir")
setwd()
setwd("testdir")
file.create(mytest.R)
file.create("mytest.R")
ls()
info()
list.files()
file.exists()
file.exists("mystest.R")
file.exists("mystest.R")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("mytest3.R", folder1, folder2)
file.path(folder1, folder2)
?file.path
file.path("folder1","folder2")
?dir.create
dir.create("testdir2") ; file.path("testdir3")
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2")
unlink("testdir2", recursive = TRUE)
SETWD()
setwd()
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
sqe(1,20)
seq(1,20)
seq(0, 10, by=0.5)
seq(0, 10, length=30])
seq(0, 10, length=30)
my_seq <- seq(0, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
?along.with
seq_along(my_seq)
rep(0, times = 40)
rep(c(0,1,2), times = 10)
rep(c(0,1,2), each = 10)
num_vect <- (0.5, 55, -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- numvect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("my", "name", "is")
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "JUSTIN")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), collapse = "")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA,1000)
?rep
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf/inf
Inf/Inf
Inf - Inf
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!'')
boring_function('My first function!)
boring_function('My first function!')
boring_function
submit
submit()
submit()
submit()
submit
submit()
submit()
info()
submit()
submit()
submit()
submit()
source()
submit()
submit
submit()
my_mean(4,5,10)
my_mean(4, 5, 10)
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder (11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
?func
args(func)
submit()
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[3]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram(I hate life)
telegram("Justin Here")
submit()
mad_libs("Toronto", "pretty", "house")
mad_libs(place = "Toronto", adjective = "pretty", noun = "house")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum(flags$colours))
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,29:23]
flag_shapes <- flags[, 29:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_matt
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
lappply(flags, unique)
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
pollutantmean
pollutantmean <- function(directory, pollutant, id = 1:332) {
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i,
width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean("specdata", "nitrate", 23)
pollutantmean <- function(directory = "C:/Users/Justin/Documents/Coursera/specdata", pollutant, id = 1:332) {
data = lapply(id, function(i) read.csv(paste(directory, "/", formatC(i,
width = 3, flag = "0"), ".csv", sep = ""))[[pollutant]])
return(mean(unlist(data), na.rm = TRUE))
}
pollutantmean
pollutantmean("specdata", "nitrate", 23)
pollutantmean(., "nitrate", 23)
pollutantmean("specdata", "nitrate", 23)
library(datasets)
data(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
209.21429-82.63636
str(sample)
?sample
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
str(rep)
?rep
set.seed(10)
x<- rep(0:1, each = 5)
e<- rnorm(10,0,20)
y<- 0.5 + 2*x + e
plot(x,y)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(2)
cachemean(1)
cachemean()
cachemean(makeVector(1))
cachemean(makeVector(4))
cachemean(makeVector(2,4))
cachemean(makeVector(25))
cachemean(makeVector(1:25))
cachemean(makeVector(1:50))
cachemean(makeVector(1:5))
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinverse <- function(solve) s <<- solve
getinverse <- function() s
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
makeCacheMatrix(x = matrix(rnorm(4))
)
makeCacheMatrix(x = matrix(rnorm(5)))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(x = 5)
abc <- rnorm(4)
xyz <- makeCacheMatrix(abc)
abcxyz <- cacheSolve(xyz)
cacheSolve <- function(x, ...) {
s <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data, ...)
x$setinverse(s)
s
}
abcxyz <- cacheSolve(xyz)
abc <- matrix(rnorm(4))
xyz <- makeCacheMatrix(abc)
abcxyz <- cacheSolve(xyz)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a<- makeVector(x = 5)
cachemean(a)
a
cachemean(a)
cachemean(5)
a<- makeVector(x = 1:5)
cachemean(a)
makeCacheMatrix(x = matrix(1:4,2,2))
q <- makeCacheMatrix(x = matrix(1:4,2,2))
cacheSolve(q)
q
cacheSolve(q)
matrix(1:4,2,2)
solve(matrix(1:4,2,2))
p <- makeCacheMatrix(x = matrix(rnorm(4),2,2))
matrix(rnorm(4))
cacheSolve(p)
cacheSolve(p)
cacheSolve(p)
p <- makeCacheMatrix(x = matrix(rnorm(4),3,3))
cacheSolve(p)
p <- makeCacheMatrix(x = matrix(rnorm(9),3,3))
cacheSolve(p)
cacheSolve(p)
matrix(rnorm(9),3,3)
solve(matrix(rnorm(9),3,3))
set.seed (1)
matrix(rnorm(9),3,3)
set.seed (1)
solve(matrix(rnorm(9),3,3))
solve(matrix(rnorm(9),3,3))
set.seed (1)
solve(matrix(rnorm(9),3,3))
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv_matrix <- NULL
set <- function(y) {
x <<- y
inv_matrix <<- NULL
}
get <- function() x
setInv_matrix<- function(inv) inv_matrix <<- inv
getInv_matrix <- function() inv_matrix
list(set = set, get = get,
setInv_matrix = setInv_matrix,
getInv_matrix = getInv_matrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInv_matrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInv_matrix(m)
m
}
cacheSolve(rnbinom(4,4,10))
cacheSolve(rnbinom(4,4,1))
cacheSolve(rnbinom(4,1,1))
cacheSolve()
cacheSolve(1)
makeCacheMatrix(1)
cacheSolve()
cacheSolve(makeCacheMatrix(1))
cacheSolve(makeCacheMatrix(2))
cacheSolve(makeCacheMatrix(2))
solve(makeCacheMatrix(1))
solve(matrix(1))
solve(matrix(c(1,2,3,4))
)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
getwd()
setwd("~/Coursera/Reproducible Research")
read.csv(activity.csv)
read.csv("activity.csv")
act <-- read.csv("activity.csv")
act <- read.csv("activity.csv")
View(act)
act2 <- na.omit(act)
View(act2)
sumsteps <- aggregate(act2$steps, by = act2$date, FUN =  sum)
sumsteps <- aggregate(act2$steps, by = list(act2$date), FUN =  sum)
View(sumsteps)
library(ggplot2)
g <- ggplot(data=sumsteps, aes(sumsteps$x))
g + geom_histogram()
hist(sumsteps, xlab = "Steps")
hist(sumsteps$x, xlab = "Steps")
hist(sumsteps$x, xlab = "Steps", title = "Histogram of the Total Number of Steps")
hist(sumsteps$x, xlab = "Steps", title = "Histogram of the Total Number of Steps")
mean(sumsteps$x)
median(sumsteps$x)
act <- read.csv("activity.csv")
sumsteps <- tapply(act$steps, act$date, FUN =  sum, na.rm = TRUE)
sumsteps <- tapply(act$steps, act$date, FUN =  sum, na.rm = TRUE)
View(act2)
hist(sumsteps, xlab = "Steps", main = "Histogram of the Total Number of Steps")
